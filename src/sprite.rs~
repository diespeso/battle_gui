use std::rc::Rc;
use std::cell::RefCell;
use ggez::{Context, GameResult};
use ggez::mint::Point2;
use ggez::graphics::{self, Drawable, DrawParam, Image};
use ggez::graphics::Rect;
use super::utils;

pub struct SpriteData {
	pub drawable: Rc<RefCell<dyn Drawable>>,
}

impl SpriteData {
	pub fn new(drawable: Rc<RefCell<dyn Drawable>>) -> Self {
		SpriteData{drawable: drawable}
	}
	
	pub fn drawable(&self) -> Rc<RefCell<dyn Drawable>> {
		self.drawable.clone()
	}
}

#[derive(Clone)] //idk
pub struct Sprite {
	data: SpriteData,
	param: DrawParam,
}

impl Sprite {
	pub fn new(data: SpriteData, param: DrawParam) -> Self {
		Sprite {
			data: data,
			param: param,
		}
	}
	
	pub fn drawable(&self) -> Rc<RefCell<dyn Drawable>> {
		self.data.drawable()
	}
	
	pub fn from_data(data: SpriteData) -> Self {
		Self::new(data, Default::default())
	}
	
	pub fn dimensions(&self, ctx: &mut Context) -> Rect {
		self.drawable().borrow().dimensions(ctx).expect("drawable has no dimensions")
	}
	
	pub fn from_drawable(drawable: Rc<RefCell<dyn Drawable>>)
		-> Self {
		Self {
			data: SpriteData::new(drawable),
			param: Default::default(),
		}
	}
	
	pub fn draw_param_mut(&mut self) -> &mut DrawParam {
		&mut self.param
	}
	
	pub fn set_draw_param(&mut self, param: DrawParam) {
		self.param = param;
	}
	
	pub fn move_by(&mut self, vector: Point2<f32>) {
		self.param.dest = utils::add_point2f(self.param.dest, vector);
	}
	
	pub fn draw(&self, ctx: &mut Context) -> GameResult {
		let data = self.data.drawable.borrow();
		data.draw(ctx, self.param)
	}
	
	pub fn pos_mut(&mut self) -> &mut Point2<f32> {
		&mut self.param.dest
	}
}
	





